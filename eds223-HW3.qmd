---
output: html_document
editor_options: 
  chunk_output_type: console
---

### Import Data

First, we load the libraries and data.

```{r}
#| code-fold: true
#| code-summary: "Show the code"
library(sf)
library(here)
library(tmap)
library(tidyverse)
library(testthat)
library(kableExtra)
library(patchwork)
library(terra) # raster handling
library(spData) # spatial data
library(spDataLarge) # spatial data
library(geodata) # spatial data
```

Up first are the night lights raster.

```{r}
#| code-fold: true
#| code-summary: "Show the code"

feb07v05 <- rast(here::here("data", "VNP46A1",
                            "VNP46A1.A2021038.h08v05.001.2021039064328.tif"))
feb07v06 <- rast(here::here("data", "VNP46A1",
                            "VNP46A1.A2021038.h08v06.001.2021039064329.tif"))
feb16v05 <- rast(here::here("data", "VNP46A1",
                            "VNP46A1.A2021047.h08v05.001.2021048091106.tif"))
feb16v06 <- rast(here::here("data", "VNP46A1",
                            "VNP46A1.A2021047.h08v06.001.2021048091105.tif"))
```

Then, we check if the datasets have the same coordinate systems.

```{r}
# check if CRS of each dataset are equal
st_crs(feb07v05) == st_crs(feb07v06)
st_crs(feb16v05) == st_crs(feb16v06)
```

## Find Changes

Create a raster for each day.

```{r}
feb07 <- merge(feb07v05, feb07v06)
feb16 <- merge(feb16v05, feb16v06)
```

We can check if the combined datasets have the same coordinate systems.

```{r}
st_crs(feb07) == st_crs(feb16)
```

```{r}
# check if coordinate reference systems match
if(st_crs(feb07) == st_crs(feb16)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
  # transform data to match
  feb07 <- st_transform(feb07, st_crs(feb16))
}
```

Find the change in light

```{r}
feb_diff <- (feb07 - feb16)
```

Reclassify the difference raster, assuming that any location that experienced a drop of more than 200 nW cm-2sr-1 experienced a blackout

```{r}
feb_diff[feb_diff < 200] <-  NA
```

vectorize the blackout mask

```{r}
blackout_sf <- feb_diff %>% 
  as.polygons() %>% 
  st_as_sf() %>% 
  st_make_valid()
```

Crop blackout vector to Houston area

```{r}
# create Houston boundary
houston_bbox <- st_bbox(c(xmin=-96.5,
                          ymin=29,
                          xmax=-94.5,
                          ymax=30.5)) %>% 
  st_as_sfc() %>% 
  st_as_sf() %>% 
  st_set_crs(st_crs(blackout_sf))
```

Ensure the CRS of each dataframe match

```{r}
blackout_sf <- st_transform(blackout_sf, crs = 3083)

if(st_crs(blackout_sf) == st_crs(houston_bbox)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
  # transform data to match
  houston_bbox <- st_transform(houston_bbox, st_crs(blackout_sf))
}
```

```{r}
houston_blackout <- st_intersection(blackout_sf, houston_bbox)
```

```{r}
tm_shape(houston_blackout) +
  tm_polygons()
```


## Exclude highways from the cropped blackout mask

Import highway data

```{r}
#| code-fold: true
#| code-summary: "Show the code"
#| 
hway_query <- "SELECT * FROM gis_osm_roads_free_1 WHERE fclass='motorway'"
hway <- st_read(here::here("data", "gis_osm_roads_free_1.gpkg"),
                   quiet = TRUE, query=hway_query)
```

```{r}
if(st_crs(hway) == st_crs(houston_bbox)) {
  print("Coordinate reference systems match")
} else{
  warning("Updating coordinate reference systems to match")
  # transform data to match
  hway <- st_transform(hway, st_crs(houston_bbox))
}
```

identify areas within 200m of all highways
hint: you may need to use st_union

```{r}
hway_buffer <- st_buffer(hway, dist = 200) %>% 
  st_union() %>% 
  st_as_sf()
```


find areas that experienced blackouts that are further than 200m from a highway

```{r}
outside_hwy <- st_disjoint(houston_blackout, hway_buffer, sparse = FALSE)
```


```{r}
tm_shape(hway_buffer) +
  tm_polygons() +
tm_shape(houston_blackout[outside_hwy,]) +
  tm_dots() 
```

```{r}
tm_shape(hway_buffer) +
  tm_polygons() +
tm_shape(houston_blackout) +
  tm_dots()
```

## Identify homes likely impacted by blackouts

identify homes that overlap with areas that experienced blackouts

```{r}
homes_query <- "SELECT *
FROM gis_osm_buildings_a_free_1
WHERE (type IS NULL AND name IS NULL)
OR type in ('residential', 'apartments', 'house', 'static_caravan', 'detached')"

homes <- st_read(here::here("data", "gis_osm_buildings_a_free_1.gpkg"),
                   quiet = TRUE, query=homes_query)
```

